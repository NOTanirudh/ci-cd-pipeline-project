pipeline {
  agent any
  environment {
    // Replace with your Docker Hub namespace or registry host
    DOCKER_REPOSITORY = "mydockerhubuser/user-service"
    // Credentials ID that must be created in Jenkins for docker registry (username/password)
    DOCKER_REGISTRY_CREDENTIALS = 'dockerhub-creds'
  }
  stages {
    stage('Checkout') {
      steps { checkout scm }
    }
    stage('Install Deps') {
      steps { sh 'pip install -r user-service/requirements.txt' }
    }
    stage('Test') {
      steps { sh 'pytest -q user-service' }
    }
    stage('Build Docker Image') {
      steps {
        script {
          // Use build number so each image has a unique tag
          IMAGE_TAG = "${DOCKER_REPOSITORY}:${env.BUILD_NUMBER}"
          sh "docker build -t ${IMAGE_TAG} user-service/"
        }
      }
    }
    stage('Push Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: DOCKER_REGISTRY_CREDENTIALS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
          sh 'docker push ${DOCKER_REPOSITORY}:${env.BUILD_NUMBER}'
        }
      }
    }
    stage('Deploy to K8s') {
      steps {
        // Prefer a rolling update by setting the image on the deployment. Fall back to apply if deployment doesn't exist.
        sh "kubectl set image deployment/user-service user-service=${DOCKER_REPOSITORY}:${env.BUILD_NUMBER} --record || kubectl apply -f k8s/"
      }
    }
  }
  post {
    always {
      sh 'docker logout || true'
    }
  }
}
